/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

export type Paginator<V> = () => Promise<PageIterator<V>> | null;

export type PageIterator<V> = V & {
  next: Paginator<V>;
  [Symbol.asyncIterator]: () => AsyncIterableIterator<V>;
};

export function createPageIterator<V>(
  page: V & { next: Paginator<V> },
  halt: boolean,
): {
  [Symbol.asyncIterator]: () => AsyncIterableIterator<V>;
} {
  return {
    [Symbol.asyncIterator]: async function* paginator() {
      yield page;
      if (halt) {
        return;
      }

      let p: typeof page | null = page;
      for (p = await p.next(); p != null; p = await p.next()) {
        yield p;
        if (halt) {
          return;
        }
      }
    },
  };
}
