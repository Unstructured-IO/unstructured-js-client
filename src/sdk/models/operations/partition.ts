/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../../sdk/models/components";
import * as z from "zod";

export type PartitionResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successful Response
     */
    elements?: Array<any> | undefined;
};

/** @internal */
export namespace PartitionResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        Elements?: Array<any> | undefined;
    };

    export const inboundSchema: z.ZodType<PartitionResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Elements: z.array(z.any()).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Elements === undefined ? null : { elements: v.Elements }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Elements?: Array<any> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PartitionResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            elements: z.array(z.any()).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.elements === undefined ? null : { Elements: v.elements }),
            };
        });
}
