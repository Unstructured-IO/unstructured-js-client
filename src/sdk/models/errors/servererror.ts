/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ServerErrorData = {
    detail?: string | undefined;
};

export class ServerError extends Error {
    detail?: string | undefined;

    /** The original data that was passed to this error instance. */
    data$: ServerErrorData;

    constructor(err: ServerErrorData) {
        super("");
        this.data$ = err;

        if (err.detail != null) {
            this.detail = err.detail;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "ServerError";
    }
}

/** @internal */
export namespace ServerError$ {
    export const inboundSchema: z.ZodType<ServerError, z.ZodTypeDef, unknown> = z
        .object({
            detail: z.string().optional(),
        })
        .transform((v) => {
            return new ServerError(v);
        });

    export type Outbound = {
        detail?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ServerError> = z
        .instanceof(ServerError)
        .transform((v) => v.data$)
        .pipe(
            z.object({
                detail: z.string().optional(),
            })
        );
}
